c
n
@operations
n
@operations
n
@operations
n
@operations
n
@operations = @operations.where("operations.user_id = #{user.try(:id)}")
@operations
exit
BankAccount.last.is_coming
BankAccount.last.api_id
BankAccount.last
@operations = @operations.where("user_id = #{user.try(:id)}").to_sql
@operations = @operations.where("user_id = #{user.try(:id)}")
 @operations = params[:ope_bank_number].present? ? BankAccount.find_by_number(params[:ope_bank_number]).operations : Operation.all
Operation.all
n
user
n
params
exit
@options
@packs = Pack.search(@options[:text], @options.reject{ |k,v| k == :ids}).distinct.order(updated_at: :desc).page(@options[:page]).per(@options[:per_page])
@packs = Pack.includes(pieces: [:expense], owner: [:organization, :ibiza, :exact_online, :my_unisoft, :sage_gec, :acd]).search(@options[:text], @options.reject{ |k,v| k == :ids}).distinct.order(updated_at: :desc).page(@options[:page]).per(@options[:per_page])
exit
params[:processed_at]
params[:processed_at].to_b
params[:processed_at]
Operation.last
params
c
params
c
exit
eit
Operation.where(is_used: true)
Operation.last
@operations.where(is_used: true).order(sort_column => sort_direction).page(params[:page]).per(params[:per_page])
@operations
@operation
n
c
n
params
n
params
exit
Operation.second.bank_account
Operation.first.bank_account
Operation.last.bank_account
Operation.last.bank_accounts
Operation.last.bank_name
Operation.last.api_name
Operation.last.api_id
Operation.last
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{sanitize_sql_like(params[:message_error])}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error].escape_string}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error].escape}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error].sanitize}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error].sanitiza}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{sanitize(params[:message_error])}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error]}%'").to_sql
Pack::Report::Preseizure.where("pack_report_preseizures.delivery_message LIKE '%#{params[:message_error]}%'")
n
c
n
params
exit
user.code
user = User.find 2315
User.find 2315
params
exit
eitexit
eit
c
data[:organization]
data
exit
@customer.try(:ibiza)
@customer.try(:ibiza).to_sql
@customer.try(:ibiza).try(:ibiza_id?)
@customer.try(:ibiza)
c
%(created ocr_needed unreadable wait_selection).include?(temp_document.state)
temp_document.state
temp_document
exit
report_preseizure.second.count
report_preseizure.first.count
report_preseizure.count
report_preseizure.first.count
report_preseizure.first.size
report_preseizure.first.any?
report_preseizure.first.anyy?
report_preseizure.first
report_preseizure.third
report_preseizure.thirst
report_preseizure.second
report_preseizure.first
report_preseizure.each { |pres| p pres };nil
report_preseizure.collect(&:id)
report_preseizure
report_preseizure.first
report_preseizure
exit
preseizure.export_state
preseizure
preeizure
c
pieces_ids
piece_ids
pieces
pack
c
@user.send_reset_password_instructions
@user = User.find 2311
@user
c
exit
Pack::Piece.find_by_name(params[:piece_name].strip)
Pack::Piece.find_by_name(params[:piece_name])
params[:piece_name].present?
c
@pieces
n
c
Pack::Piece.find_by_name(params[:piece_name])
@pieces
n
params
exit
params
c
params[:ids]
c
s
n
c
n
operation
n
c
operation
n
params
c
params
c
params
exit
@operations
n
@operations
exit
params
c
@user_selected
exit
accounts.collect(&:id)
accounts
@users
@users.collect(:id)
@users.collect(&:id)
@users.collect(:&id)
@users
accounts
uid_user
n
params
c
@user_selected
n
uid_user
n
params
c
exit
uid_user
n
params
c
@user_selected
n
params
exit
user_idsexit
@user.id
user_ids
n
params
c
exit
c
params
c
params
c
exit
package
customer.packages
c
customer.packages
customer.package
customer
package
exit
@organization_statistic = SubscriptionStatistic.where(organization_id: 1).last
@organization_statistic
@@organization_statistic
c
list_customers
n
organization
@organization_code
n
c
Organization.find_by_code @organization_code
@organization_code
organization
n
c
@organization_code
organization
n
c
piece.reload
piece.save
piece.pre_assignment_state = 'waiting'
piece.created_at = 5.month.ago
piece.created_at = 5.month.ag
piece
cpiece
c
piece.save
piece.pre_assignment_state = 'waiting'
piece.errors.messages
piece.save
piece.created_at = 5.month.ago
c
cc
c
cc
c
preseizure.save
preseizure.piece_id = -piece.id
preseizure
piece.save
piece.pre_assignment_state = 'waiting'
piece.errors.messages
piece.save
piece.created_at = 1.month.ago
